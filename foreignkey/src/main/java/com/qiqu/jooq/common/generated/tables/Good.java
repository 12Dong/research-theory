/**
 * This class is generated by jOOQ
 */
package com.qiqu.jooq.common.generated.tables;


import com.qiqu.jooq.common.generated.Foreignkey;
import com.qiqu.jooq.common.generated.Keys;
import com.qiqu.jooq.common.generated.tables.records.GoodRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Good extends TableImpl<GoodRecord> {

    private static final long serialVersionUID = 214473405;

    /**
     * The reference instance of <code>foreignkey.good</code>
     */
    public static final Good GOOD = new Good();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GoodRecord> getRecordType() {
        return GoodRecord.class;
    }

    /**
     * The column <code>foreignkey.good.good_id</code>.
     */
    public final TableField<GoodRecord, Integer> GOOD_ID = createField("good_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>foreignkey.good.goodname</code>.
     */
    public final TableField<GoodRecord, String> GOODNAME = createField("goodname", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>foreignkey.good</code> table reference
     */
    public Good() {
        this("good", null);
    }

    /**
     * Create an aliased <code>foreignkey.good</code> table reference
     */
    public Good(String alias) {
        this(alias, GOOD);
    }

    private Good(String alias, Table<GoodRecord> aliased) {
        this(alias, aliased, null);
    }

    private Good(String alias, Table<GoodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Foreignkey.FOREIGNKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GoodRecord> getPrimaryKey() {
        return Keys.KEY_GOOD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GoodRecord>> getKeys() {
        return Arrays.<UniqueKey<GoodRecord>>asList(Keys.KEY_GOOD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Good as(String alias) {
        return new Good(alias, this);
    }

    /**
     * Rename this table
     */
    public Good rename(String name) {
        return new Good(name, null);
    }
}
