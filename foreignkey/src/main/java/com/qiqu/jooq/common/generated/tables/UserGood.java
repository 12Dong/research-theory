/**
 * This class is generated by jOOQ
 */
package com.qiqu.jooq.common.generated.tables;


import com.qiqu.jooq.common.generated.Foreignkey;
import com.qiqu.jooq.common.generated.Keys;
import com.qiqu.jooq.common.generated.tables.records.UserGoodRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserGood extends TableImpl<UserGoodRecord> {

    private static final long serialVersionUID = 2085821729;

    /**
     * The reference instance of <code>foreignkey.user_good</code>
     */
    public static final UserGood USER_GOOD = new UserGood();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserGoodRecord> getRecordType() {
        return UserGoodRecord.class;
    }

    /**
     * The column <code>foreignkey.user_good.id</code>.
     */
    public final TableField<UserGoodRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>foreignkey.user_good.user_id</code>.
     */
    public final TableField<UserGoodRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>foreignkey.user_good.good_id</code>.
     */
    public final TableField<UserGoodRecord, Integer> GOOD_ID = createField("good_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>foreignkey.user_good</code> table reference
     */
    public UserGood() {
        this("user_good", null);
    }

    /**
     * Create an aliased <code>foreignkey.user_good</code> table reference
     */
    public UserGood(String alias) {
        this(alias, USER_GOOD);
    }

    private UserGood(String alias, Table<UserGoodRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserGood(String alias, Table<UserGoodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Foreignkey.FOREIGNKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserGoodRecord> getPrimaryKey() {
        return Keys.KEY_USER_GOOD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserGoodRecord>> getKeys() {
        return Arrays.<UniqueKey<UserGoodRecord>>asList(Keys.KEY_USER_GOOD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserGoodRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserGoodRecord, ?>>asList(Keys.USER_ID, Keys.GOOD_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserGood as(String alias) {
        return new UserGood(alias, this);
    }

    /**
     * Rename this table
     */
    public UserGood rename(String name) {
        return new UserGood(name, null);
    }
}
